module top_module (
	input clk,
	input L,
	input r_in,
	input q_in,
	output reg Q);
     wire d;

    assign d = L ? r_in : q_in;

    always @(posedge clk)
        Q <= d;
endmodule
   module main_module (
    input clk,
    input L,
    input r0,
    input r1,
    input r2,
    output [2:0] Q
);
    wire q0, q1;

    // First flip-flop
    top_module u0 (
        .clk(clk),
        .L(L),
        .r_in(r0),
        .q_in(Q[0]),     // Not used really (could be 1'b0),
        .Q(Q[0])
    );

    // Second flip-flop
    top_module u1 (
        .clk(clk),
        .L(L),
        .r_in(r1),
        .q_in(Q[0]),
        .Q(Q[1])
    );

    // Third flip-flop with XOR
    top_module u2 (
        .clk(clk),
        .L(L),
        .r_in(r2),
        .q_in(Q[0] ^ Q[1]),
        .Q(Q[2])
    );

endmodule
           
